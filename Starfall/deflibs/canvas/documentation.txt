--@name deflibs/canvas/Documentation
--@author Yours Truly

-- Documentation on all functions you may want to use

-- Getting started
do
    --[[
    To see all of the UI elements, add GUI:Draw() to a rendering hook!
        [ I.E. ]
        [ hook.add("drawhud", "draw-gui", function() GUI:Draw() end) ]
    
    The cursor needs to be set manually, likewise updates need to be called manually!
        [ I.E. ]
        [ GUI:SetCursorPosition(input.getCursorPos()) ]
        [ GUI:Update() ]
    I recommend you call GUI:SetCursorPosition() first!
    
    Do note:
    
        Each canvas has a texture that it renders to. Controllers, or elements, automatically
    trigger writes to the texture!
    
        Canvases can also take in a background drawing function, rendered before elements.
    If you need to manually trigger a texture write (to update what is shown on a canvas),
    use [CanvasVariable]:QueueDraw() (then GUI:Update() if it needs to be immediate)!
    
    Alright, that's it. Have fun!
    ]]
end

-- GUI, entry point
do
    --[[
    GUI.CreateCanvas(Name)
        Makes and gets a new canvas.
        arguments (string CanvasName)
        returns (table Canvas)
    
    GUI:SetCursorPosition(X, Y)
        Sets the cursor's position internally.
        Neccessary for interacting with Elements.
    
    GUI:Update()
        Causes the Cursor to do a collision check.
        Also causes all canvas items to write to their respective textures, if needed.
    
    GUI:Draw()
        Render all of the UI.
        You'll probably put this in the "drawhud" hook.
    
    GUI:CursorLeftClick(Down)
        Left-click, or interact with a button.
        arguments (bool ButtonDown)
    
    GUI.ScaleText(Text, Width, Height, MaxScale)
        Get a scale factor so that (Text) can fit in a rectangle that is (Width * Height).
        returns (number ScaleFactor, number TextWidth, number TextHeight)
    
    GUI:GetCursorObject()
        Gets hovered element, mainly for debug.
        returns (bool GotElement, table Element)
    
    GUI:DrawCollision(Active)
        Draw element hitboxes, mainly for debug.
        arguments (bool ShouldDrawBoxes)
    
    GUI:GetFont()
        Gets default font generated in Main, mainly for internal use.
        returns (string FontObject)
    ]]
end

-- Canvas, element container
do
    --[[
    Note: You can name your canvas variables whatever you want; here, I refer to it as "Canvas".
        [ I.E. ]
        [ local panel1 = GUI.CreateCanvas("bob_ross") ]
        [ panel1:SetOrigin(4, 20) ]
    
    Canvas:SetOrigin(X, Y)
        Sets position.
        arguments (number Left, number Top)
    
    Canvas:SetPadding(Padding)
        Sets offset from edges of texture.
        arguments (number PixelPadding)
    
    Canvas:SetTextureSpace(W, H)
        SHOULD BE DONE AFTER SETTING PADDING!
        Sets used texture area (max: 1024).
        arguments (number PixelWidth, number PixelHeight)
        
    Canvas:SetBackground(Func)
        Sets graphic function, elements are overlayed on-top of this.
        arguments (function BackgroundDraw)
    
    Canvas:Draw()
        Render this canvas, mainly for internal use.
    ]]
end

-- Elements
do
    --[[
    Controllers, or what I refer to as Elements, need to be created in a Canvas.
        [ I.E. ]
        [ local panel1 = GUI.CreateCanvas("bob_ross") ]
        [ local btn1 = panel1:CreateButton() ]
        [ btn1:SetOrigin(10, 10) ]
    
    Generally, if you want to delete an element, you can use:
        [ Canvas:Remove(Element) ]
    
    >> Instance functions
    
    Every element usually has the following functions:
    
    Element:SetOrigin(X, Y)
        Sets position.
        arguments (number Left, number Top)
    
    Element:SetSize(W, H)
        Sets size.
        arguments (number Width, number Height)
    
    Element:SetFunc(NewFunc)
        Sets pressing function.
        Different elements pass different parameters to the provided function.
        arguments (function Functionality)
    
    Element:SetDown(Pressed) or Element:SetValue(Value)
        Sets this element's state, but does not call its function.
        arguments (bool Pressed)
    
    Element:Trigger(Pressed)
        Triggers this element and calls its function.
        arguments (bool Pressed)
    
    Element:SetDraw(Func)
        Sets graphic function.
        Some elements might have multiple drawing functions.
        arguments (function(table Element) Draw)
    
    Element:GetOrigin()
        Gets this element's position.
        returns (number Left, number Top)
    
    Element:GetSize()
        Gets this element's size.
        returns (number Width, number Height)
    
    Element:GetPressed()
        Gets whether this element is pressed.
        returns (bool Pressed)
    
    Element:GetHovered()
        Gets whether this element is hovered.
        returns (bool Hovered)
    
    >> Default overrides
    
    These apply to elements when a new one is created, they can also be overridden with instance functions.
    These affect the elements the same way as the instance functions.
    Note: You have to use GUI.[ElementType] to refer to these! They do not use the unique names!
    
    Every element usually has the following default overrides:
    
    GUI.ElementType:SetOrigin(X, Y)
    
    GUI.ElementType:SetSize(W, H)
    
    GUI.ElementType:SetDraw(Func)
    ]]
end

-- Button
do
    --[[
    
    Canvas:CreateButton(IsToggle)
        Makes and gets a button.
        arguments (bool IsToggleButton default:false)
        returns (table Button)
    
    See (Elements) for more details.
    
    >> Instance functions
    
    Button:SetOrigin(X, Y)
    
    Button:SetSize(W, H)
    
    Button:SetFunc(NewFunc)
    
    Button:SetDown(Pressed)
    
    Button:Trigger(Pressed)
    
    Button:SetDraw(Func)
    
    Button:GetOrigin()
    
    Button:GetSize()
    
    Button:GetPressed()
    
    Button:GetHovered()
    
    >> Default overrides
    
    GUI.Button:SetOrigin(X, Y)
    
    GUI.Button:SetSize(W, H)
    
    GUI.Button:SetDraw(Func)
    ]]
end

-- TextButton
do
    --[[
    
    Canvas:CreateTextButton(IsToggle)
        Makes and gets a textbutton.
        arguments (bool IsToggleButton default:false)
        returns (table TextButton)
    
    See (Elements) for more details.
    
    >> Instance functions
    
    Inherits functions from (Button).
    
    TextButton:SetPadding(Padding)
        Sets padding so text is constrained more.
        arguments (number Padding)
    
    TextButton:SetText(Text)
        Sets text.
        arguments (string Text)
    
    TextButton:SetTextSize(TextSize)
        Sets text size.
        arguments (number TextSize)
    
    TextButton:SetTextDraw(Func)
        Sets the text drawing function.
        This also has a regular drawing function, too.
        arguments (function(table TextButton) TextDraw)
    
    >> Default overrides
    
    GUI.TextButton:SetOrigin(X, Y)
    
    GUI.TextButton:SetSize(W, H)
    
    GUI.TextButton:SetPadding(Padding)
    
    GUI.TextButton:SetText(Text)
    
    GUI.TextButton:SetTextSize(TextSize)
    
    GUI.TextButton:SetDraw(Func)
    
    GUI.TextButton:SetTextDraw(Func)
    ]]
end

-- TickBox
do
    --[[
    
    Canvas:CreateTickBox()
        Makes and gets a tickbox.
        returns (table TickBox)
    
    See (Elements) for more details.
    
    >> Instance functions
    
    Inherits functions from (Button).
    
    TickBox:SetTickDraw(Func)
        Sets the tick drawing function.
        This also has a regular drawing function, too.
        arguments (function(table TickBox) TickDraw)
    
    >> Default overrides
    
    GUI.TickBox:SetOrigin(X, Y)
    
    GUI.TickBox:SetSize(W, H)
    
    GUI.TickBox:SetDraw(Func)
    
    GUI.TickBox:SetTickDraw(Func)
    ]]
end

-- Slider
do
    --[[
    
    Canvas:CreateSlider(KnobOnly)
        Makes and gets a slider.
        arguments (bool KnobOnly default:false)
        returns (table Slider)
    
    See (Elements) for more details.
    
    >> Instance functions
    
    Slider:SetOrigin(X, Y)
    
    Slider:SetSize(W, H)
    
    Slider:SetKnobSize(W, H)
        Sets the handle's size.
        arguments (number Width, number Height)
    
    Slider:SetRange(Min, Max)
        Sets the minimum and maximum value based on handle position.
        arguments (number Min, number Max)
    
    Slider:SetDecimals(Decimals)
        Sets decimal places the value will be rounded to.
        arguments (number Decimals)
    
    Slider:SetFunc(NewFunc)
    
    Slider:SetValue(Value)
        Sets value, but does not call function.
        arguments (number Value)
    
    Slider:Trigger(Value)
        Sets value and calls function.
        arguments (number Value)
    
    Slider:SetDraw(Func)
    
    Slider:SetKnobDraw(Func)
        Sets handle drawing function.
        arguments (function(table Slider) HandleDraw)
    
    Slider:GetOrigin()
    
    Slider:GetSize()
    
    Slider:GetKnobSize()
    
    Slider:GetValue()
    
    Slider:GetPressed()
    
    Slider:GetHovered()
    
    >> Default overrides
    
    GUI.Slider:SetOrigin(X, Y)
    
    GUI.Slider:SetSize(W, H)
    
    GUI.Slider:SetKnobSize(W, H)
    
    GUI.Slider:SetRange(Min, Max)
    
    GUI.Slider:SetDecimals(Decimals)
    
    GUI.Slider:SetDraw(Func)
    
    GUI.Slider:SetKnobDraw(Func)
    ]]
end

-- Input
do
    --[[
    
    Canvas:CreateInput(Numeric)
        Makes and gets a input.
        arguments (bool Numeric default:false)
        returns (table Input)
    
    See (Elements) for more details.
    
    >> Instance functions
    
    Input:SetOrigin(X, Y)
    
    Input:SetSize(W, H)
    
    Input:SetPadding(Padding)
        Sets padding so text is constrained more.
        arguments (number Padding)
    
    Input:SetTextSize(Size)
        Sets text size.
        arguments (number TextSize)
    
    Input:SetRange(Min, Max)
        Sets the minimum and maximum value.
        arguments (number Min, number Max)
    
    Input:SetDecimals(Decimals)
        Sets decimal places the value will be rounded to.
        arguments (number Decimals)
    
    Input:SetFunc(NewFunc)
    
    Input:SetValue(Value)
        Sets value, but does not call function.
        arguments (string Value)
    
    Input:Trigger(Value)
        Sets value and calls function.
        arguments (number Value)
    
    Input:SetDraw(Func)
    
    Input:SetTextDraw(Func)
        Sets the text drawing function.
        arguments (function(table Input) TextDraw)
    
    Input:SetCaretDraw(Func)
        Sets the caret position drawing function.
        arguments (function(table Input) TextDraw)
    
    Input:GetOrigin()
    
    Input:GetSize()
    
    Input:GetText()
    
    Input:GetTextSize()
    
    Input:GetPadding()
    
    Input:GetValue()
    
    Input:GetEditing()
    
    Input:GetPressed()
    
    Input:GetHovered()
    
    >> Default overrides
    
    GUI.Input:SetOrigin(X, Y)
    
    GUI.Input:SetSize(W, H)
    
    GUI.Input:SetPadding(Padding)
    
    GUI.Input:SetText(Text)
    
    GUI.Input:SetTextSize(TextSize)
    
    GUI.Input:SetRange(Min, Max)
    
    GUI.Input:SetDecimals(Decimals)
    
    GUI.Input:SetDraw(Func)
    
    GUI.Input:SetTextDraw(Func)
    
    GUI.Input:SetCaretDraw(Func)
    ]]
end

-- SliderCombo
do
    --[[
    
    Canvas:CreateSliderCombo(KnobOnly)
        Makes and gets a slider combo.
        arguments (bool KnobOnly default:false)
        returns (table SliderCombo)
    
    To remove this, use SliderCombo:Remove() instead of Canvas:Remove(SliderCombo)!
    
    >> Instance functions
    
    SliderCombo:SetOrigin(X, Y)
        Sets assembly position, directly sets slider position.
        arguments (number Top, number Left)
    
    SliderCombo:SetInputOffset(X, Y)
        Sets input position offset.
        arguments (number X, number Y)
    
    SliderCombo:SetRange(Min, Max)
        Sets the minimum and maximum value for slider and input.
        arguments (number Min, number Max)
    
    SliderCombo:SetFunc(NewFunc)
        Sets the function.
        arguments (function(number) Function)
    
    SliderCombo:SetValue(Value)
        Sets value, but does not call function.
        arguments (number Value)
    
    SliderCombo:Trigger(Value)
        Sets value and calls function.
        arguments (number Value)
    
    SliderCombo:GetSlider()
        Gets slider.
        returns (table Slider)
    
    SliderCombo:GetInput()
        Gets input.
        returns (table Input)
    
    >> Default overrides
    
    GUI.SliderCombo:SetOrigin(X, Y)
    
    GUI.SliderCombo:SetInputOffset(X, Y)
    ]]
end

-- Dropdown
do
    --[[
    
    Canvas:CreateDropdown()
        Makes and gets a dropdown.
        returns (table Dropdown)
    
    See (Elements) for more details.
    
    >> Instance functions
    
    Dropdown:SetOrigin(X, Y)
    
    Dropdown:SetSize(W, H)
    
    Dropdown:SetOptions(Options)
        Sets dropdown menu names and functions.
        Table is non key-value and entries are tables containing { string Name, function Function }.
        arguments (table Options)
    
    Dropdown:SetPadding(Padding)
        Sets padding so text is constrained more.
        arguments (number Padding)
    
    Dropdown:SetText(Text)
        Sets text.
        arguments (string Text)
    
    Dropdown:SetTextSize(TextSize)
        Sets text size.
        arguments (number TextSize)
    
    Dropdown:SetDraw(Func)
    
    Dropdown:SetTextDraw(Func)
        Sets the text drawing function.
        arguments (function(table Dropdown, string Text, bool Hovered) TextDraw)
    
    Dropdown:GetOrigin()
    
    Dropdown:GetSize()
    
    Dropdown:GetHeight()
    
    Dropdown:GetPadding()
    
    Dropdown:GetText()
    
    Dropdown:GetTextSize()
    
    Dropdown:GetPressed()
    
    Dropdown:GetHovered()
    
    >> Default overrides
    
    GUI.Dropdown:SetOrigin(X, Y)
    
    GUI.Dropdown:SetSize(W, H)
    
    GUI.Dropdown:SetPadding(Padding)
    
    GUI.Dropdown:SetText(Text)
    
    GUI.Dropdown:SetTextSize(TextSize)
    
    GUI.Dropdown:SetDraw(Func)
    
    GUI.Dropdown:SetTextDraw(Func)
    ]]
end
