@name Hydraulic Pivot r1
@inputs Angle_Desired
@outputs Length1 Length2
@persist HomePoint:vector2 FireOrder:array HydraulicCount
@trigger Angle_Desired

#[
    
    Instructions:
    
        The orientation of the E2 does not matter!
    
        You may need to add Length outputs to @outputs. If you do, remember to set the Length output to a FireOrder slot.
    I.E.
    
    Length1 = FireOutput[1, number]
    Length2 = FireOutput[2, number]
    Length3 = FireOutput[3, number]
    
        It is helpful to picture your rotater and the points where the hydros connect to it from above and imagine it were on
    a X, Y coordinate plane!
    
]#

if(first() | dupefinished()) {
    
    # Settings
    
    DebugConnections = 0        # Print where hydraulics connect to spinner. Remember reference frame!
    
    HydraulicCount = 2          # How many hydros do you have
    
    HomePoint = vec2(0, -200)  # The point where the hydros push/pull from
    
    RadiusLength = 100          # Radius where hydros connect to the Rotater
    
    AngOffset = -90               # Rotates the frame of reference for where the hydraulics connect to the spinner.
    
    # # # # # # # # # # # # # # # # # # # # #
    
    FireOrder = array()
    
    # Organizing into array
    local AngDiv = 360 / HydraulicCount
    for(I=1, HydraulicCount, 1) {
        FireOrder[I,vector2] = vec2(0, RadiusLength):rotate(AngOffset + (I-1) * AngDiv)
    }
    
    if(DebugConnections) {
        for(I=1, HydraulicCount, 1) { print(round(FireOrder[I,vector2], 2)) }
    }
}

if(~Angle_Desired) {
    
    # Actual fire order
    local FireOutput = array()
    for(I=1, HydraulicCount, 1) { FireOutput[I,number] = HomePoint:distance( FireOrder[I,vector2]:rotate(Angle_Desired) ) }
    
    # Hydraulic lengths
    Length1 = FireOutput[1, number]
    Length2 = FireOutput[2, number]
}
