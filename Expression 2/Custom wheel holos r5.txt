@name Custom wheel holos r5
@inputs [Sample1 Sample2 Sample3 Sample4]:entity Wheels:array
@persist [ArrColID ArrModel ArrScale ArrAngle ArrColor ArrMaterial ArrBodyGroups ArrSkin Sample]:array Count ActualCount
@persist Save SaveTarget:entity SaveInd SaveState
@trigger none

if(first() | dupefinished()) {
    
    local W = 0
    local Ind = 0
    
    Count=ActualCount = 0
    
    SaveInd = 0
    
    # # # # # # # # # # # # # # # # # # # # #
    
    Save = 0        #Prints the sample wheels' attributes in chat
    
#[    
    Props detected with >ArrColID< get the following parameters:
        
        >ArrScale<, and X,Y,Z scale modifier.
        
        >ArrAngle<, an alignment angle.
    
        If a sample model isn't wired:
            
            >ArrModel<, the model used. Remember to add quotes!
        
            >ArrColor<, an RGB color.
            
            >ArrMaterial<, a material to use. Remember to add quotes!
            
            BodyGroups, up to three:
                >ArrBodyGroups[1]<
                >ArrBodyGroups[2]<
                >ArrBodyGroups[3]<
            
            >ArrSkin<, a numerical skin value.
    
    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    This is the format.
    
    W++
    ArrColID[W,vector] = vec(0, 0, 0)
    
    ArrScale[W,vector] = vec(1, 1, 1)
    ArrAngle[W,angle] = ang(0, 0, 0)
    
    ArrModel[W,string] = ""
    ArrColor[W,vector] = vec(0, 0, 0)
    ArrMaterial[W,string] = ""
    
    ArrBodyGroups[W,vector] = vec(0, 0, 0)
    
    ArrSkin[W,number] = 0
    ]#
    
    
    #Return rollers
    W++
    ArrColID[W,vector] = vec(200)
    
    ArrScale[W,vector] = vec(0.4, 0.8, 0.4)
    ArrAngle[W,angle] = ang(0, -90, 0)
    
    ArrModel[W,string] = "models/sprops/trans/miscwheels/tank15.mdl"
    ArrColor[W,vector] = vec(148, 142, 103)
    ArrMaterial[W,string] = ""
    
    ArrBodyGroups[W,vector] = vec(0, 0, 0)
    
    ArrSkin[W,number] = 1
    
    
    #Idler
    W++
    ArrColID[W,vector] = vec(150)
    
    ArrScale[W,vector] = vec(0.85, 3.0, 0.85)
    ArrAngle[W,angle] = ang(0, 0, 0)
    
    ArrModel[W,string] = "models/sprops/trans/miscwheels/tank15.mdl"
    ArrColor[W,vector] = vec(148, 142, 103)
    ArrMaterial[W,string] = ""
    
    ArrBodyGroups[W,vector] = vec(0, 3, 0)
    
    ArrSkin[W,number] = 0
    
    
    #Sprocket
    W++
    ArrColID[W,vector] = vec(100)
    
    ArrScale[W,vector] = vec(1.4, 2.9, 1.4)
    ArrAngle[W,angle] = ang(0, 0, 0)
    
    ArrModel[W,string] = "models/sprops/trans/miscwheels/wt1spr_12.mdl"
    ArrColor[W,vector] = vec(193, 188, 151)
    ArrMaterial[W,string] = "models/props_building_details/courtyard_template001c_bars"
    
    ArrBodyGroups[W,vector] = vec(1, 1, 0)
    
    ArrSkin[W,number] = 0
    
    
    #Roadwheels
    W++
    ArrColID[W,vector] = vec(50)
    
    ArrScale[W,vector] = vec(0.8, 1.5, 0.8)
    ArrAngle[W,angle] = ang(0, 0, 0)
    
    ArrModel[W,string] = "models/sprops/trans/miscwheels/tank30.mdl"
    ArrColor[W,vector] = vec(148, 142, 103)
    ArrMaterial[W,string] = ""
    
    ArrBodyGroups[W,vector] = vec(0, 1, 0)
    
    ArrSkin[W,number] = 0
    
    # # #
    
    
#[
    
    ArrModel[W,string] = models/sprops/trans/miscwheels/tank15.mdl
    ArrColor[W,vector] = vec(148, 142, 103)
    ArrMaterial[W,string] = 
    ArrBodyGroups[W,vector][1] = 0
    ArrBodyGroups[W,vector][2] = 0
    ArrBodyGroups[W,vector][3] = 0
    ArrSkin[W,number] = 0
    
    ArrModel[W,string] = models/sprops/trans/miscwheels/tank15.mdl
    ArrColor[W,vector] = vec(148, 142, 103)
    ArrMaterial[W,string] = 
    ArrBodyGroups[W,vector][1] = 0
    ArrBodyGroups[W,vector][2] = 3
    ArrBodyGroups[W,vector][3] = 0
    ArrSkin[W,number] = 0
    
    ArrModel[W,string] = models/sprops/trans/miscwheels/wt1spr_12.mdl
    ArrColor[W,vector] = vec(193, 188, 151)
    ArrMaterial[W,string] = models/props_building_details/courtyard_template001c_bars
    ArrBodyGroups[W,vector][1] = 1
    ArrBodyGroups[W,vector][2] = 1
    ArrBodyGroups[W,vector][3] = 0
    ArrSkin[W,number] = 0
    
    ArrModel[W,string] = models/sprops/trans/miscwheels/tank25.mdl
    ArrColor[W,vector] = vec(148, 142, 103)
    ArrMaterial[W,string] = 
    ArrBodyGroups[W,vector][1] = 0
    ArrBodyGroups[W,vector][2] = 1
    ArrBodyGroups[W,vector][3] = 0
    ArrSkin[W,number] = 0
    
]#


    
    
    # # # # # # # # # # # # # # # # # # # # #
    
    
    
    #Getting samples
    Ind++, Sample[Ind,entity] = Sample1
    Ind++, Sample[Ind,entity] = Sample2
    Ind++, Sample[Ind,entity] = Sample3
    Ind++, Sample[Ind,entity] = Sample4
    
    #Only spawn wheels if there is anything to spawn them on
    if(Wheels:count()) {
        
        Count = 1
        
        #Getting info from sample entity, if wired
        for(I=1, W, 1) {
            
            local Ent = Sample[I,entity]
            if(Ent:isValid()) {
                
                ArrModel[I,string] = Ent:model()
                ArrColor[I,vector] = Ent:getColor()
                ArrMaterial[I,string] = Ent:getMaterial()
                ArrBodyGroups[I,vector] = vec(Ent:getBodygroup(0), Ent:getBodygroup(1), Ent:getBodygroup(2))
                ArrSkin[I,number] = Ent:getSkin()
            }
        }
        
        timer("SpawnWheels", 30)
    }
}

if(clk("SpawnWheels")) {
    
    local Ent = Wheels[Count,entity]
        
    #Initializing a lot of local variables
    local Model = ""
    local Scale = vec()
    local Color = vec()
    local Material = ""
    local Angle = ang()
    local BodyGroups = vec()
    local Skin = 0
    local Found = 0
    
    #Checking which attributes to use
    for(I=1, ArrColID:count(), 1) {
        if(Ent:getColor() == ArrColID[I,vector]) {
            
            Model = ArrModel[I,string]
            Scale = ArrScale[I,vector]
            Color = ArrColor[I,vector]
            Material = ArrMaterial[I,string]
            Angle = ArrAngle[I,angle]
            BodyGroups = ArrBodyGroups[I,vector]
            Skin = ArrSkin[I,number]
            Found = 1
            ActualCount++
            break
        }
    }
    
    #Apply
    if(Found) {
        
        holoCreate(ActualCount, Ent:toWorld(vec()), Scale, Ent:toWorld(Angle), Color, Model)
        holoMaterial(ActualCount, Material)
        holoBodygroup(ActualCount, 0, BodyGroups[1])
        holoBodygroup(ActualCount, 1, BodyGroups[2])
        holoBodygroup(ActualCount, 2, BodyGroups[3])
        holoSkin(ActualCount, Skin)
        holoParent(ActualCount, Ent)
    }
    
    #Go through until finished
    if(Count < Wheels:count()) {timer("SpawnWheels", 30)}
    
    else {
        
        print("Spawned " + (ActualCount) + " wheel holos!")
        
        #Initializing saving wheel attributes, doing it here because I don't want any print overlap
        if(Save) {
            
            local Found = 0
            
            #Targeting a wheel if it exists
            for(I=SaveInd+1, Sample:count(), 1) {
                
                if(Sample[I,entity]:isValid()) {
                    SaveTarget = Sample[I,entity]
                    SaveInd = I
                    SaveState = 1
                    Found = 1
                    break
                }
            }
            
            if(Found) {
                print("Printing " + SaveInd)
                timer("Save", 600)
            }
            
            else {print("Didn't find any samples!")}
        }
    }
    
    Count++
}

#Saving wheel attributes
if(clk("Save")) {
    
    #Can't print everything all at once
    switch(SaveState) {
        
        case 1,
        
        print("ArrModel[W,string] = " + SaveTarget:model())
        local Col = SaveTarget:getColor()
        print("ArrColor[W,vector] = vec(" + Col[1] + ", " + Col[2] + ", " + Col[3] + ")")
        
        break
        
        case 2,
        
        print("ArrMaterial[W,string] = " + SaveTarget:getMaterial())
        local BG = vec(SaveTarget:getBodygroup(0), SaveTarget:getBodygroup(1), SaveTarget:getBodygroup(2))
        print("ArrBodyGroups[W,vector] = vec(" + BG[1] + ", " + BG[2] + ", " + BG[3] + ")")
        print("ArrSkin[W,number] = " + SaveTarget:getSkin())
        
        break
    }
    
    #Printing more attributes for the same wheel
    if(SaveState < 2) {SaveState++, timer("Save", 600)}
    
    else {
        
        #Targeting another wheel if it exists
        for(I=SaveInd+1, Sample:count(), 1) {
            
            if(Sample[I,entity]:isValid()) {
                SaveTarget = Sample[I,entity]
                SaveInd = I
                SaveState = 1
                Found = 1
                break
            }
        }
        
        if(Found) {
            print("Printing " + SaveInd)
            timer("Save", 600)
        }
        
        #No other wheel found
        else {
            print("Printing complete!")
        }
    }
}