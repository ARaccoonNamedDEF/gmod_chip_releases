@name MDC Prop Engine ECU
@inputs StartLink ECULink CoreInfo:table RPM
@outputs EngineActive Throttle Clutch
@persist [M ECUInfo TCU STB]:table
@trigger none

#[
    
    Instructions:
    
    This is an engine control unit!
    
    This chip requires an MDC Telemetry Unit to function.
    
        Wire...
        
        < StartLink > to [StartLink] on the MDC Telemetry Unit.
        
        < ECULink > to [ECULink] on the MDC Telemetry Unit.
        
        < CoreInfo > to [CoreInfo] on the MDC Telemetry Unit.
        
        < RPM > to your engine's rpm.

]#

if(first() | dupefinished()) {
    
    M = table()
    
    # # # # # # # # # # # # # # # # # # # # #
    
    #~ Required to run ~#
    
    ContributeData = 1          # You should leave this as 1, unless you have multiple of these for some reason.
    
    M["Reversible",number] = 0          # 1 limits throttle to be positive, 0 allows it to go negative.
    
    M["Idle",number] = 150      # Your engine's idle rpm.
    
    BandMin = 300               # Bottom of you engine's powerband.
    
    BandMax = 800               # Top of you engine's powerband.
    
    #~ General ~#
    
    M["MinThrottle",number] = 20        # Minimum throttle. Doesn't do anything if Reversible is 1.
    
    M["MaxThrottle",number] = 100       # Maximum throttle.
    
    M["SafeSpd",number] = 10            # Speed the vehicle should be below in order to switch from forward to reverse, or vice versa.
    
    #~ Governor ~#
    
    M["GovTarget",number] = 0           # Engine RPM where the governer activates, relative to top of powerband.
    
    M["GovRate",number] = 4 * 10^-1     # Throttle subtracted per RPM above GovTarget.
    
    #~ Specific ~#
    
    M["ThrustBuild",number] = 1/3       # Percentage throttle added per execution cycle.
    
    M["ThrustDecay",number] = 1/2       # Percentage throttle lost per execution cycle.
    
    M["InletPower",number] = 1          # Percentage of the power from your engine to let in. If you're not sure, set this to 1.
   
    M["ClutchOverride",number] = 0      # This delays the clutch from dis-engaging; accepts 0-1.
    
    # Anti-slip [Requires TCU]
    
    M["ThrottleSlipMul",number] = 0.1    # Throttle subtracted per unit speed the engine is above the vehicle.
    
    M["ThrottleSlipLimit",number] = 0.5      # Maximum subtracted throttle.
    
    M["SlipYawMul",number] = 0.0        # Measurement offset for steering.
    
    M["SlipDeadzone",number] = 2        # Measurement deadzone.
    
    # Smooth shifting [Requires TCU]
    
    M["ThrottleLineMul",number] = 0.50      # Line influence over throttle.
    
    M["ClutchLineMul",number] = 0.50        # Line influence over clutch.
    
    #~ Keybinds ~#
    
    M["IgnitionKey",string] = "h"       # Turn engine on or off.
    
    M["ThrottleUpKey",string] = "pad_minus"        # Throttle up.
    
    M["ThrottleDownKey",string] = "pad_plus"       # Throttle down.
    
    M["ThrottleStep",number] = 10       # How much throttle to add or subtract.
    
    M["ForwardKey",string] = "w"        # Throttle forwards.
    
    M["ReverseKey",string] = "s"        # Throttle backwards.
    
    M["DeclutchKey",string] = "lalt"    # Disconnect the engine from the transmssion.
    
    # # # # # # # # # # # # # # # # # # # # #
    
    # > Initialization
    
    M["MinThrottle",number] = M["Reversible",number] ? 0 : M["MinThrottle",number]
    Throttle = M["MinThrottle",number]
    
    ECUInfo = table(
        "BandMax" = BandMax,
        "BandMin" = BandMin,
        "Reverse" = 0,
        "Clutch" = 0,
        "Throttle" = Throttle,
        "IsMoving" = 0,
        "AutoStop" = 0,
        "ShiftMul" = 1,
        "IsCoasting" = 0,
        "ShaftReversed" = 0
    )
    
    EngineActive = 0
    Clutch = 1
    
    M["ThrustForward",number] = 0
    M["ThrustReverse",number] = 0
    M["Thrust",number] = 0
    M["Engagement",number] = 0
    M["ReverseTarget",number] = M["Reversible",number] ? -1 : 1
    M["ThrottleCap",number] = M["MaxThrottle",number]
    M["GovTarget",number] = BandMax + M["GovTarget",number]
    M["ClutchOverride",number] = M["Idle",number] + (ECUInfo["BandMin",number] - M["Idle",number]) * M["ClutchOverride",number]
    M["ThrottleLineMul",number] = 1 - M["ThrottleLineMul",number]
    M["ClutchLineMul",number] = 1 - M["ClutchLineMul",number]
    M["ThrottleSlipLimit",number] = -M["ThrottleSlipLimit",number]
    
    TCU = table(
        "Connected" = 0,
        "Line" = 1,
        "Locked" = 0,
        "InReverse" = 0,
        "Ratio" = 0,
        "RatioEngineMul" = 0
    )
    
    STB = table(
        "Connected" = 0,
        "IsBraking" = 0,
        "IsPivoting" = 0
    )
    
    # Try to get extra information from Telemetry Unit
    if(StartLink == 1) {
        
        if(CoreInfo:exists("TCUInfo")) {
            TCU["Connected",number] = 1
            TCU["RatioEngineMul",number] = CoreInfo["TCUInfo",table]["RatioEngineMul",number]
        }
        
        if(CoreInfo:exists("STBInfo")) {
            STB["Connected",number] = 1
        }
    }
    
    # Throttle function
    function newThrottle(Delta:number) {
        
        local LowerBounds = M["MinThrottle",number] + abs(M["MinThrottle",number] % Delta)
        M["ThrottleCap",number] = clamp(M["ThrottleCap",number] + Delta, LowerBounds, M["MaxThrottle",number])
        
        ECUInfo["ShiftMul",number] = remap(M["ThrottleCap",number], 0, M["MaxThrottle",number], M["Idle",number] / ECUInfo["BandMax",number], 1)
    }
    
    # Send own information
    ECUInfo["Ready",number] = 1
    if(ContributeData) { CoreInfo["ECUInfo",table] = ECUInfo }
}

# > Keybinds
event keyPressed(Player:entity, Key:string, Down:number, KeyBind:string) {
    
    if(Player == CoreInfo["Driver",entity]) {
        
        switch(Key) {
            
            # Toggling engine on or off
            case M["IgnitionKey",string],
            if(Down) { EngineActive = !EngineActive }
            break
            
            # Throttle direction
            
            case M["ForwardKey",string],
            M["ThrustForward",number] = Down
            break
            
            case M["ReverseKey",string],
            M["ThrustReverse",number] = Down
            break
            
            # Throttle
            
            case M["ThrottleUpKey",string],
            if(Down) { newThrottle(M["ThrottleStep",number]) }
            break
            
            case M["ThrottleDownKey",string],
            if(Down) { newThrottle(-M["ThrottleStep",number]) }
            break
            
            # Declutch
            case M["DeclutchKey",string],
            ECUInfo["IsCoasting",number] = Down
            break
        }
    }
}

# > Execution triggers
event input(InputName:string) {
    
    switch(InputName) {
        
        # Delayed start
        case "StartLink",
        reset()
        break
        
        # Update function
        case "ECULink",
        
        if(CoreInfo["Active",number]) {
            
            # > Extra information
            
            if(TCU["Connected",number]) {
                TCU["Line",number] = CoreInfo["TCUInfo",table]["Line",number]
                TCU["Locked",number] = CoreInfo["TCUInfo",table]["Locked",number]
                TCU["InReverse",number] = CoreInfo["TCUInfo",table]["InReverse",number]
                TCU["Ratio",number] = CoreInfo["TCUInfo",table]["Ratio",number]
            }
            
            if(STB["Connected",number]) {
                STB["IsBraking",number] = CoreInfo["STBInfo",table]["IsBraking",number]
                STB["IsPivoting",number] = CoreInfo["STBInfo",table]["IsPivoting",number]
            }
            
            # > Common
            
            local ThrustTarget = 0
            local ClutchTarget = 0
            ECUInfo["AutoStop",number] = 0
            ECUInfo["ShaftReversed",number] = RPM < 0
            
            local LockedDir = TCU["Locked",number] ? (TCU["InReverse",number] ? -1 : 1) : 0
            
            # Forwards & reverse
            if(M["ThrustForward",number] & LockedDir != -1) {
                if(CoreInfo["Speed",number] > -M["SafeSpd",number]) {
                    ThrustTarget = 1
                    ECUInfo["Reverse",number] = 0
                }
                else { ECUInfo["AutoStop",number] = 1 }
            }
            elseif(M["ThrustReverse",number] & LockedDir != 1) {
                if(CoreInfo["Speed",number] < M["SafeSpd",number]) {
                    ThrustTarget = M["ReverseTarget",number]
                    ECUInfo["Reverse",number] = 1
                }
                else { ECUInfo["AutoStop",number] = 1 }
            }
            
            # Throttle & clutch targets
            
            ECUInfo["IsMoving",number] = ThrustTarget
            M["Thrust",number] = clamp(
                ThrustTarget,
                M["Thrust",number] - M["ThrustDecay",number],
                M["Thrust",number] + M["ThrustBuild",number]
            )
            
            if(ECUInfo["IsCoasting",number]) { ClutchTarget = 0 }
            else { ClutchTarget = CoreInfo["SpeedMag",number] < M["SafeSpd",number] ? abs(ThrustTarget) : 1 }
            
            M["Engagement",number] = clamp(
                ClutchTarget,
                M["Engagement",number] - M["ThrustDecay",number],
                M["Engagement",number] + M["ThrustBuild",number]
            )
            
            # > Apply
            
            local ReadRPM = abs(RPM)
            
            # Throttle
            if(M["Thrust",number]) {
                
                local Governor = max((ReadRPM - M["GovTarget",number]) * M["GovRate",number], 0)
                local LineThrottle = remap(TCU["Line",number], 1, 0, 1, M["ThrottleLineMul",number])
                local AntiSlip = 0
                
                if(!(ECUInfo["IsCoasting",number] | STB["IsBraking",number] | STB["IsPivoting",number])) {
                    local EngineSpeed = ReadRPM * TCU["Ratio",number] * TCU["RatioEngineMul",number]
                    local Slip = CoreInfo["SpeedMag",number] - EngineSpeed + abs(CoreInfo["AngVelocity",vector][3]) * M["SlipYawMul",number]
                    Slip = max(abs(Slip) - M["SlipDeadzone",number], 0) * sign(Slip)
                    AntiSlip = clamp(Slip * M["ThrottleSlipMul",number], M["ThrottleSlipLimit",number], 0)
                }
                
                Throttle = M["ThrottleCap",number] * LineThrottle * M["Thrust",number] + (AntiSlip - Governor) * sign(RPM)
            }
            else { Throttle = M["MinThrottle",number] }
            
            # Clutch
            if(M["Engagement",number]) {
                
                local AntiStall = remap(
                    ReadRPM,
                    M["ClutchOverride",number],
                    ECUInfo["BandMin",number],
                    1 - M["InletPower",number],
                    1
                )
                AntiStall = clamp(AntiStall, 0, 1)
                local LineClutch = remap(TCU["Line",number], 1, 0, 1, M["ClutchLineMul",number])
                
                Clutch = 1 - min(AntiStall * M["Engagement",number], LineClutch)
            }
            else { Clutch = 1 }
            
            ECUInfo["Throttle",number] = Throttle
            ECUInfo["Clutch",number] = Clutch
        }
        
        else {
            M["ThrustForward",number]=M["ThrustReverse",number]=ECUInfo["IsCoasting",number] = 0
            M["Thrust",number] = 0
            Throttle=ECUInfo["Throttle",number] = M["MinThrottle",number]
            Clutch=ECUInfo["Clutch",number] = 1
            ECUInfo["IsMoving",number]=ECUInfo["AutoStop",number] = 0
        }
        
        break
    }
}
